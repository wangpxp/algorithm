package sort;

/**
 * 给出一个无重叠的 ，按照区间起始端点排序的区间列表。
 *
 * 在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。
 *
 * 示例 1:
 *
 * 输入: intervals = [[1,3],[6,9]], newInterval = [2,5]
 * 输出: [[1,5],[6,9]]
 * 示例 2:
 *
 * 输入: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
 * 输出: [[1,2],[3,10],[12,16]]
 * 解释: 这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。
 *
 */


public class _57_InsertInterval {
    // 由于题目本来就是有序的，考虑插入排序
    // 分为三种情况
    // 新区间不包含在任何一个子区间里，插入作为一个新区间
    // 新区间包含旧区间的一半，扩大这个旧区间
    // 新区间覆盖率旧区间，删除被覆盖的旧区间
    // 思路：先用第一个元素，找到新区间应该在的位置，再使用第二个元素，和后面第二个元素对比，有必要就合并

    public int[][] insert(int[][] intervals, int[] newInterval) {

    }
}
